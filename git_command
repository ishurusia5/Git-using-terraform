##  BASIC COMMANDS  ##


1. git init --> initalize the empty git repo and create .git folder 

2. git status  --> it give info about branch, commit, tracked and untracked file 

######################## GIT IGNORE FILE ###############################

In this if you don't want to push your credentials or sensitive 
data file like .env, cred file or more for that we use .gitignore file
and after you do git status you only see file which is not in .gitignore
file as a untracked or tracked file.

########################################################################


Command	What it does
git add <file>	Adds file to staging area
git reset <file>	Removes file from staging area
git reset	Removes all files from staging area
git diff	Shows unstaged changes
git diff --staged	Shows staged changes
git status	Shows working directory + staging area status

########################################################################

3. git add . --> to add file in staging area 

4. git reset <file name> --> to remove file from staging aera

5. git commit -m "commit message" --> to commit file to the working directory or area.

6. git reset HEAD~1  --> to undo the commit 

7. git remote add origin git@github.com:ishurusia5/Git-using-terraform.git --> to add git url in remote repo under .git folder / config file 

8. git remote set-url origin git@github.com:ishurusia5/Git-using-terraform.git --> to replace the git repo url 

9. git config --global user.email "you@example.com"

10. git config --global user.name "Your Name"

11. git push --> to push code to the repository 

12. git fetch --> it will fetch the all the latest changes but did not change anything in code base on server.

13. git pull --> it will also fetch the all the latest changes and also change in file.

14. git checkout -b <new_branch name>  --> it will checkout the branch also and create the new branch and the code also 

15. git checkout <branch name>  --> switch to another branch 

16. git branch -m <new branch name> --> Renames the current branch to <new-name>

17. git branch -b <new-branch-name>  --> Creates a new branch but doesn't switch to it.

18. git merge <from dev> < to master > --> in git merge we need to checkout to the branch in which we need to merge the code and than run the merge command
                                            also git merge maintain the commit history.

19. git rebase dev --> run this command on master branch where you want to merge dev changes. it delete the commit history to liner the specific branch commit history

20. git stash --> it is just for temporarily store the changes which you don't want loss while working on other feature.

21. git stash pop --> to again undo the stash changes

22. git reset --soft commit-id --> it just remove the commit id like i have 10 commint and i want to reset to commit 6 than all the commit above 6 will remove and 6 commit will become head commit but it doesnot hamper the files


23. git reset --hard commit-id --> it also delete file also.

